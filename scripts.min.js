"use strict";function _defineProperty(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}const PIXEL_SIZE=2,TILE_SIZE=16*PIXEL_SIZE,DEFAULT_ROWS=13,DEFAULT_COLUMNS=31,EXPLOSION_TIME=2e3,WALL_EXPLOSION_TIME=500,ENEMY_TYPES=["balloom","oneal","doll","minvo","kondoria","ovapi","pass","pontan"],POWER_UP_TYPES=["bombs","flames","speed","wall-pass","detonator","bomb-pass","flame-pass","mystery"],POWER_UP_SPEED_BOOST=.25,POWER_UP_INVINCIBLE_TIME=3e4;let SFX_VOLUME=.2,MUSIC_VOLUME=.2;const ENEMY_XP_SHOW_TIME=2e3,ENEMY_DYING_TIME=1100,BOMBERMAN_DYING_TIME=600,CHAIN_EXPLOSION_TIME=100;let ENEMY_ID=0;const getRandomInt=(e,t)=>(e=Math.ceil(e),t=Math.ceil(t),Math.floor(Math.random()*(t-e))+e),getRandomDirection=(e=["left","right","up","down"])=>e[getRandomInt(0,e.length)],playExplosionSound=()=>{const e=document.createElement("audio");e.src="./sounds/explosion.wav",e.volume=SFX_VOLUME,e.play().then()},playBombLeaveSound=()=>{const e=document.createElement("audio");e.src="./sounds/leave-bomb.wav",e.volume=SFX_VOLUME,e.play().then()},playPowerUpPickedSound=()=>{const e=document.createElement("audio");e.src="./sounds/power-up.wav",e.volume=SFX_VOLUME,e.play().then()},playChangeVolumeSound=e=>{const t=document.createElement("audio");t.src="./sounds/volume-change.wav",t.volume=e,t.play().then()},createId=(e,t)=>`${e}-${t}`,changeTitle=e=>{document.title=e};class Timer{constructor(e,t){this.callback=e,this.remaining=t,this.resume()}pause(){this.clear(),this.remaining-=(new Date).getTime()-this.start}resume(){this.start=(new Date).getTime(),this.clear(),this.timerID=setTimeout(this.callback,this.remaining)}clear(){clearTimeout(this.timerID)}}class IntervalTimer{constructor(e){this.callback=e,this.resume()}resume(){this.clear(),this.timerId=setInterval(this.callback,1e3)}clear(){clearInterval(this.timerId)}}class Entity{constructor({board:e,left:t,top:s,speed:i}){_defineProperty(this,"createHTML",()=>{this.div=document.createElement("div"),this.div.style.position="absolute",this.img=document.createElement("img"),this.img.alt="entity",this.div.append(this.img),this.board.append(this.div),this.div.style.height=`${this.size}px`,this.div.style.width=`${this.size}px`}),this.board=e,this.speed=i||PIXEL_SIZE/2,this.left=t||2*PIXEL_SIZE,this.top=s||2*PIXEL_SIZE,this.size=.75*TILE_SIZE,this.wallPass=!1,this.createHTML(),this.draw()}moveLeft(e){this.left-=e||this.speed}moveRight(e){this.left+=e||this.speed}moveUp(e){this.top-=e||this.speed}moveDown(e){this.top+=e||this.speed}draw(){this.div.style.transform=`translate3d(${16*PIXEL_SIZE+Math.floor(this.left)}px, ${16*PIXEL_SIZE+Math.floor(this.top)}px, 0)`}getBorders({own:e=!0,floorValues:t=!1}={}){let s,i,o,r,n=0;return e||(n=1),this instanceof Bomberman?(s=(this.left-n+(PIXEL_SIZE+1))/TILE_SIZE+2,i=(this.left+n+this.size-(PIXEL_SIZE+1))/TILE_SIZE+2,o=(this.top-n)/TILE_SIZE+2,r=(this.top+n-1+this.size-(PIXEL_SIZE-1))/TILE_SIZE+2):(s=(this.left-n)/TILE_SIZE+2,i=(this.left+n+this.size)/TILE_SIZE+2,o=(this.top-n)/TILE_SIZE+2,r=(this.top+n+this.size)/TILE_SIZE+2),t&&(s=Math.floor(s),i=Math.floor(i),o=Math.floor(o),r=Math.floor(r)),{left:s,right:i,top:o,bottom:r}}}class EnemyXP{constructor({board:e,left:t,top:s,amount:i}){_defineProperty(this,"deleteAfter",()=>{new Timer(()=>{this.div.remove()},ENEMY_XP_SHOW_TIME)}),this.board=e,this.left=t,this.top=s,this.amount=i,this.initialize()}initialize(){this.createHTML(),this.deleteAfter()}createHTML(){this.div=document.createElement("div"),this.div.className="enemy-xp",this.div.innerText=this.amount,this.div.style.transform=`translate3d(${this.left}px, ${this.top+3*PIXEL_SIZE}px, 0)`,this.board.append(this.div)}}class Enemy extends Entity{constructor({board:e,left:t,top:s,xp:i,type:o}){super({board:e,left:t,top:s}),_defineProperty(this,"handleType",()=>{switch(this.type){case"balloom":this.xp=100,this.speed=.5,this.createHTML("./img/enemies/balloom.png");break;case"oneal":this.xp=200,this.speed=1,this.createHTML("./img/enemies/oneal.png");break;case"doll":this.xp=400,this.speed=1.25,this.createHTML("./img/enemies/doll.png");break;case"minvo":this.xp=800,this.speed=1.5,this.createHTML("./img/enemies/minvo.png");break;case"kondoria":this.xp=1e3,this.speed=.25,this.wallPass=!0,this.createHTML("./img/enemies/kondoria.png");break;case"ovapi":this.xp=2e3,this.speed=.5,this.wallPass=!0,this.createHTML("./img/enemies/ovapi.png");break;case"pass":this.xp=4e3,this.speed=1.5,this.createHTML("./img/enemies/pass.png");break;case"pontan":this.xp=8e3,this.speed=1.5,this.wallPass=!0,this.createHTML("./img/enemies/pontan.png")}}),_defineProperty(this,"createHTML",e=>{this.div.className="enemy",this.img.src=e}),this.id=ENEMY_ID,ENEMY_ID++,this.direction=getRandomDirection(),this.dead=!1,this.xp=i,this.type=o,this.handleType()}moveLeft(e){super.moveLeft(e),this.img.className="enemy-walk-left",this.direction="left"}moveRight(e){super.moveRight(e),this.img.className="enemy-walk-right",this.direction="right"}moveUp(e){super.moveUp(e),this.img.className="enemy-walk-up",this.direction="up"}moveDown(e){super.moveDown(e),this.img.className="enemy-walk-down",this.direction="down"}die(){this.img.className="enemy-die",this.dead=!0,this.timer=new Timer(()=>{this.img.className="enemy-dead",this.div.remove(),new EnemyXP({board:this.board,left:this.left,top:this.top,amount:this.xp})},ENEMY_DYING_TIME)}}class Bomberman extends Entity{constructor({board:e,liveCount:t}){super({board:e}),_defineProperty(this,"resetPosition",()=>{this.left=0,this.top=0}),_defineProperty(this,"initialize",()=>{this.createHTML()}),_defineProperty(this,"createHTML",()=>{this.div.id="bomberman",this.img.src="./img/bomberman.png",this.img.alt="bomberman",this.liveCountDiv=document.createElement("div"),this.liveCountDiv.id="live-count";const e=document.createElement("img");e.src="./img/game-info/heart.png",e.alt="heart";const t=document.createElement("span");t.textContent=`${this.liveCount}`,this.liveCountDiv.append(e),this.liveCountDiv.append(t),document.querySelector("#game-info").append(this.liveCountDiv)}),_defineProperty(this,"restart",()=>{this.left=PIXEL_SIZE,this.top=PIXEL_SIZE}),this.left=2*PIXEL_SIZE,this.top=2*PIXEL_SIZE,this.direction="down",this.liveCount=t,this.bombPass=!1,this.flamePass=!1,this.detonator=!1,this.invincible=!1,this.isSurroundedWithBombs=!1}moveLeft(e){super.moveLeft(e),this.img.className="bomberman-walk-left",this.direction="left"}moveRight(e){super.moveRight(e),this.img.className="bomberman-walk-right",this.direction="right"}moveUp(e){super.moveUp(e),this.img.className="bomberman-walk-up",this.direction="up"}moveDown(e){super.moveDown(e),this.img.className="bomberman-walk-down",this.direction="down"}die(){this.img.className="bomberman-die",this.liveCount--,this.timer=new Timer(()=>{this.img.className="bomberman-dead"},BOMBERMAN_DYING_TIME)}}class Block{constructor({board:e,x:t,y:s}){_defineProperty(this,"createHTML",()=>{this.div=document.createElement("div"),this.div.style.gridColumnStart=String(this.x),this.div.style.gridRowStart=String(this.y),this.board.append(this.div)}),_defineProperty(this,"initialize",()=>{this.createHTML()}),this.board=e,this.x=t,this.y=s,this.initialize()}}class Rock extends Block{constructor({board:e,x:t,y:s}){super({board:e,x:t,y:s}),_defineProperty(this,"addClass",()=>{this.div.classList.add("rock")}),this.id=createId(t,s),this.addClass()}}class ExitDoor extends Block{constructor({board:e,x:t,y:s}){super({board:e,x:t,y:s}),_defineProperty(this,"addClass",()=>{this.div.classList.add("exit-door")}),this.addClass()}}class PowerUp extends Block{constructor({board:e,x:t,y:s,type:i}){super({board:e,x:t,y:s}),_defineProperty(this,"addClass",()=>{this.div.classList.add("power-up",`power-up-${this.type}`)}),this.id=createId(t,s),this.type=i,this.addClass()}}class Wall extends Block{constructor({board:e,x:t,y:s}){super({board:e,x:t,y:s}),_defineProperty(this,"addClass",()=>{this.div.classList.add("wall")}),_defineProperty(this,"addImage",()=>{this.addClass(),this.img=document.createElement("img"),this.img.src="./img/wall.png",this.img.alt="wall",this.div.append(this.img)}),this.id=createId(t,s),this.addImage()}explode(){this.img.classList.add("wall-explode")}}class Bomb{constructor({board:e,x:t,y:s,explosionSize:i,stage:o}){_defineProperty(this,"initialize",()=>{this.createHTML(),this.explodeAfter()}),_defineProperty(this,"createHTML",()=>{this.div=document.createElement("div"),this.img=document.createElement("img"),this.img.alt="bomb",this.div.classList.add("bomb"),this.div.style.gridColumnStart=String(this.x),this.div.style.gridRowStart=String(this.y),this.img.classList.add("bomb-exploding"),this.img.src="./img/bomb.png",this.div.append(this.img),this.board.append(this.div)}),_defineProperty(this,"createExplosions",()=>{this.div.remove();const e=new Explosion({board:this.board,x:this.x,y:this.y,size:this.explosionSize,stage:this.stage});new Timer(()=>{this.stage.deleteExplosion(this.x,this.y)},WALL_EXPLOSION_TIME),this.stage.explosions.set(e.id,e),playExplosionSound()}),_defineProperty(this,"explodeAfter",()=>{this.timer=new Timer(()=>{this.createExplosions(),this.stage.deleteBomb(this.x,this.y)},EXPLOSION_TIME)}),this.board=e,this.x=t,this.y=s,this.id=createId(t,s),this.explosionSize=i,this.stage=o,this.initialize()}}class Explosion{constructor({board:e,x:t,y:s,size:i,stage:o}){_defineProperty(this,"deleteDivs",()=>{for(const[,e]of this.divs)e.remove()}),_defineProperty(this,"createHTMLForOne",(e,t,s,i=!1)=>{const o=document.createElement("div"),r=document.createElement("img");return i&&(o.style.opacity="0"),o.classList.add("explosion"),r.classList.add(s),r.src="./img/explosion.png",r.alt="explosion",o.style.gridColumnStart=String(e),o.style.gridRowStart=String(t),o.append(r),this.board.append(o),o}),_defineProperty(this,"create",(e,t,s)=>{let i,o=!0,r=!1;if("explosion-center"!==s&&this.stage.isBomb(e,t)){this.stage.getBomb(e,t).instant=!0,o=!1}else if(this.stage.isBlock(e,t,{bombPass:!0}))if(this.stage.isWall(e,t)){i=this.createHTMLForOne(e,t,s,!0),o=!0,this.stage.getWall(e,t).explode(),new Timer(()=>{this.stage.deleteWall(e,t)},WALL_EXPLOSION_TIME),o=!0,r=!0}else this.stage.isRock(e,t)&&(o=!1);else i=this.createHTMLForOne(e,t,s),o=!0;return{id:createId(e,t),created:o,div:i,isWall:r}}),_defineProperty(this,"createCenter",()=>{const{id:e,div:t,created:s}=this.create(this.x,this.y,"explosion-center");s&&this.divs.set(e,t)}),_defineProperty(this,"createLeft",()=>{const{id:e,div:t,created:s}=this.create(this.x-this.size,this.y,"explosion-left");s&&this.divs.set(e,t)}),_defineProperty(this,"createRight",()=>{const{id:e,div:t,created:s}=this.create(this.x+this.size,this.y,"explosion-right");s&&this.divs.set(e,t)}),_defineProperty(this,"createTop",()=>{const{id:e,div:t,created:s}=this.create(this.x,this.y-this.size,"explosion-top");s&&this.divs.set(e,t)}),_defineProperty(this,"createBottom",()=>{const{id:e,div:t,created:s}=this.create(this.x,this.y+this.size,"explosion-bottom");s&&this.divs.set(e,t)}),_defineProperty(this,"createLeftHorizontals",()=>{for(let e=this.x-1;e>=this.x-this.size+1;e--){const{id:t,div:s,created:i,isWall:o}=this.create(e,this.y,"explosion-horizontal");if(!i)return!1;if(this.divs.set(t,s),o)return!1}return!0}),_defineProperty(this,"createRightHorizontals",()=>{for(let e=this.x+1;e<this.x+this.size;e++){const{id:t,div:s,created:i,isWall:o}=this.create(e,this.y,"explosion-horizontal");if(!i)return!1;if(this.divs.set(t,s),o)return!1}return!0}),_defineProperty(this,"createTopVerticals",()=>{for(let e=this.y-1;e>=this.y-this.size+1;e--){const{id:t,div:s,created:i,isWall:o}=this.create(this.x,e,"explosion-vertical");if(!i)return!1;if(this.divs.set(t,s),o)return!1}return!0}),_defineProperty(this,"createBottomVerticals",()=>{for(let e=this.y+1;e<this.y+this.size;e++){const{id:t,div:s,created:i,isWall:o}=this.create(this.x,e,"explosion-vertical");if(!i)return!1;if(this.divs.set(t,s),o)return!1}return!0}),_defineProperty(this,"createHTML",()=>{this.createCenter(),this.createLeftHorizontals()&&this.createLeft(),this.createRightHorizontals()&&this.createRight(),this.createTopVerticals()&&this.createTop(),this.createBottomVerticals()&&this.createBottom()}),this.board=e,this.x=t,this.y=s,this.id=createId(t,s),this.size=i,this.stage=o,this.divs=new Map,this.createHTML()}}class KeyListener{constructor(){_defineProperty(this,"initialize",()=>{document.addEventListener("keydown",e=>{this.keysPressed.set(e.code,!0)}),document.addEventListener("keyup",e=>{this.keysPressed.set(e.code,!1)})}),_defineProperty(this,"isPressed",e=>this.keysPressed.get(e)),this.keysPressed=new Map,this.initialize()}}class StageOptions{constructor({rows:e,columns:t,enemies:s,bombCount:i,explosionSize:o,roundTime:r,score:n,powerUps:a}){_defineProperty(this,"initialize",()=>{this.initializeTimer(),this.initializeScore()}),_defineProperty(this,"draw",()=>{this.drawTimer(),this.drawScore()}),_defineProperty(this,"drawScore",()=>{this.scoreDiv.querySelector("span").innerText=`${this.score}`}),_defineProperty(this,"drawTimer",()=>{this.timerDiv.querySelector("span").innerText=`${this.roundTime}`}),_defineProperty(this,"initializeTimer",()=>{const e=document.querySelector("#timer");e&&e.remove(),this.timerDiv=document.createElement("div"),this.timerDiv.id="timer";const t=document.createElement("img");t.src="./img/game-info/clock.png",t.alt="clock";const s=document.createElement("span");s.innerText=`${this.roundTime}`,this.timerDiv.append(t),this.timerDiv.append(s),document.querySelector("#game-info").append(this.timerDiv)}),_defineProperty(this,"initializeScore",()=>{const e=document.querySelector("#score");e&&e.remove(),this.scoreDiv=document.createElement("div"),this.scoreDiv.id="score";const t=document.createElement("img");t.src="./img/game-info/star.png",t.alt="star";const s=document.createElement("span");s.innerText=`${this.score}`,this.scoreDiv.append(t),this.scoreDiv.append(s),document.querySelector("#game-info").append(this.scoreDiv)}),_defineProperty(this,"initializeTimerChange",()=>{this.resetRoundTime(),this.interval&&this.interval.clear(),this.interval=new IntervalTimer(()=>{this.roundTime--,this.passedTime++,this.roundTime<=0&&this.interval.clear()})}),_defineProperty(this,"resetRoundTime",()=>{this.roundTime+=this.passedTime,this.passedTime=0}),this.rows=e,this.columns=t,this.enemies=s,this.bombCount=i,this.explosionSize=o,this.roundTime=r,this.passedTime=0,this.score=n,this.initialScore=n,this.powerUps=a,this.initialize()}}class Stage{constructor({data:e,bombCount:t,explosionSize:s}){_defineProperty(this,"updateBombCountBy",e=>{this.bombCount+=e,this.options.bombCount+=e}),_defineProperty(this,"reinitialize",e=>{this.removeAllDivs();const t=e.rows||DEFAULT_ROWS,s=e.columns||DEFAULT_COLUMNS,i=e.roundTime||200,o=e.enemies,r=e.powerUps||{},{bombCount:n,explosionSize:a,score:h}=this.options;this.options=new StageOptions({rows:t,columns:s,enemies:o,bombCount:n,explosionSize:a,roundTime:i,score:h,powerUps:r}),this.createHTML(),this.changeStyles()}),_defineProperty(this,"removeMapElements",e=>{for(const[t]of this[e])this[e].get(t).div.remove();this[e].clear()}),_defineProperty(this,"removeExplosions",()=>{for(const[,e]of this.explosions)for(const[,t]of e.divs)t.remove();this.explosions.clear()}),_defineProperty(this,"removeAllDivs",()=>{this.removeMapElements("rocks"),this.removeMapElements("walls"),this.removeMapElements("powerUps"),this.removeMapElements("enemies"),this.removeExplosions(),this.exitDoor.div.remove()}),_defineProperty(this,"restart",()=>{this.options.bombCount=this.bombCount,this.removeAllDivs(),this.createHTML()}),_defineProperty(this,"createRocks",()=>{for(let e=1;e<=this.options.columns;e++){const t=new Rock({board:this.board,x:e,y:1}),s=new Rock({board:this.board,x:e,y:this.options.rows});this.rocks.set(t.id,t),this.rocks.set(s.id,s)}for(let e=2;e<this.options.rows;e++){const t=new Rock({board:this.board,x:1,y:e}),s=new Rock({board:this.board,x:this.options.columns,y:e});this.rocks.set(t.id,t),this.rocks.set(s.id,s)}for(let e=3;e<this.options.columns;e+=2)for(let t=3;t<this.options.rows;t+=2){const s=new Rock({board:this.board,x:e,y:t});this.rocks.set(s.id,s)}}),_defineProperty(this,"createWalls",()=>{const e=Math.round(this.options.rows*this.options.columns/8),t=getRandomInt(.9*e,1.1*e);let s=0;for(;s<t;){const e=getRandomInt(1,this.options.columns+1),t=getRandomInt(1,this.options.rows+1);if(!(this.isBlock(e,t)||e<=3&&t<=3)){const i=new Wall({x:e,y:t,board:this.board});this.walls.set(i.id,i),s++}}}),_defineProperty(this,"createPowerUps",()=>{if(this.options.powerUps)for(const e of Object.keys(this.options.powerUps)){let t=0;for(;t<this.options.powerUps[e];){const s=getRandomInt(1,this.options.columns+1),i=getRandomInt(1,this.options.rows+1);if(!this.isPowerUp(s,i)&&this.isWall(s,i)&&!this.isExitDoor(s,i)){const o=new PowerUp({board:this.board,x:s,y:i,type:e});this.powerUps.set(o.id,o),t++}}}}),_defineProperty(this,"createExitDoor",()=>{for(;;){const e=getRandomInt(1,this.options.columns),t=getRandomInt(1,this.options.rows);if(this.isWall(e,t))return void(this.exitDoor=new ExitDoor({board:this.board,x:e,y:t}))}}),_defineProperty(this,"createEnemies",()=>{if(this.options.enemies)for(const e of Object.keys(this.options.enemies)){let t=0;for(;t<this.options.enemies[e];){const s=getRandomInt(1,this.options.columns+1),i=getRandomInt(1,this.options.rows+1);if(!(this.isBlock(s,i)||s<5&&i<5)){const o=TILE_SIZE*(s-2),r=TILE_SIZE*(i-2),n=new Enemy({board:this.board,left:o,top:r,type:e});this.enemies.set(n.id,n),t++}}}}),_defineProperty(this,"createHTML",()=>{this.createRocks(),this.createWalls(),this.createExitDoor(),this.createEnemies(),this.createPowerUps()}),_defineProperty(this,"addStyles",()=>{const e=document.createElement("style");e.id="board-style",document.querySelector("head").append(e)}),_defineProperty(this,"changeStyles",()=>{document.querySelector("#board-style").innerHTML=`\n\t\t\t#board {\n\t\t\t\tgrid-template-rows: repeat(${this.options.rows}, ${TILE_SIZE}px);\n\t\t\t\tgrid-template-columns: repeat(${this.options.columns}, ${TILE_SIZE}px);\n\t\t\t}`,this.board.style.width=`${TILE_SIZE*this.options.columns}px`,this.board.style.height=`${TILE_SIZE*this.options.rows}px`}),_defineProperty(this,"initialize",()=>{this.createHTML(),this.addStyles(),this.changeStyles()}),_defineProperty(this,"isPowerUp",(e,t)=>{const s=createId(e,t);return this.powerUps.has(s)}),_defineProperty(this,"isRock",(e,t)=>{const s=createId(e,t);return this.rocks.has(s)}),_defineProperty(this,"isWall",(e,t)=>{const s=createId(e,t);return this.walls.has(s)}),_defineProperty(this,"isBomb",(e,t)=>{const s=createId(e,t);return this.bombs.has(s)}),_defineProperty(this,"isExplosion",(e,t,{flamePass:s=!1}={})=>{const i=createId(e,t);if(!s)for(const[,e]of this.explosions)for(const[t]of e.divs)if(t===i)return!0;return!1}),_defineProperty(this,"isExitDoor",(e,t)=>this.exitDoor.x===e&&this.exitDoor.y===t&&!this.isWall(e,t)),_defineProperty(this,"isBlock",(e,t,{bombPass:s=!1,wallPass:i=!1,enemy:o=!1}={})=>(e=Math.floor(e),t=Math.floor(t),e<1||t<1||e>this.options.columns||t>this.options.rows||this.isRock(e,t)||!i&&this.isWall(e,t)||!s&&this.isBomb(e,t)||o&&this.isExitDoor(e,t))),_defineProperty(this,"getWall",(e,t)=>{const s=createId(e,t);return this.walls.get(s)}),_defineProperty(this,"getBomb",(e,t)=>{const s=createId(e,t);return this.bombs.get(s)}),_defineProperty(this,"getPowerUp",(e,t)=>{const s=createId(e,t);return this.powerUps.get(s)}),_defineProperty(this,"deleteWall",(e,t)=>{const s=createId(e,t),i=this.getWall(e,t);i&&i.div&&i.div.remove(),this.walls.delete(s)}),_defineProperty(this,"deletePowerUp",(e,t)=>{const s=createId(e,t);this.getPowerUp(e,t).div.remove(),this.powerUps.delete(s)}),_defineProperty(this,"deleteBomb",(e,t)=>{const s=createId(e,t),i=this.bombs.get(s);i.timer.clear(),i.div.remove(),this.bombs.delete(s),this.options.bombCount++}),_defineProperty(this,"deleteExplosion",(e,t)=>{const s=createId(e,t);for(const[,e]of this.explosions)for(const[t]of e.divs)if(t===s)return e.deleteDivs(),void this.explosions.delete(s)}),_defineProperty(this,"deleteEnemy",e=>{this.enemies.delete(e)});const i=e.rows||DEFAULT_ROWS,o=e.columns||DEFAULT_COLUMNS,r=e.roundTime||200,n=e.enemies||{},a=e.powerUps||{};this.board=document.querySelector("#board"),this.bombCount=t,this.options=new StageOptions({rows:i,columns:o,enemies:n,bombCount:t,powerUps:a,explosionSize:s,roundTime:r,score:0}),this.rocks=new Map,this.walls=new Map,this.bombs=new Map,this.powerUps=new Map,this.consumedPowerUps=new Map,this.enemies=new Map,this.explosions=new Map}addBomb(e){this.bombs.set(e.id,e),this.options.bombCount--}}class GameMenu{constructor(e){_defineProperty(this,"show",()=>{this.selected=0,this.div.className="game-menu-show",document.addEventListener("keyup",this.listener)}),_defineProperty(this,"hide",()=>{this.div.className="game-menu-hide",document.removeEventListener("keyup",this.listener)}),_defineProperty(this,"draw",()=>{2===this.selected&&(this.ranges[0].disabled=!1,this.ranges[1].disabled=!0,this.ranges[0].focus()),3===this.selected&&(this.ranges[0].disabled=!0,this.ranges[1].disabled=!1,this.ranges[1].focus()),2!==this.selected&&3!==this.selected&&this.unFocusAll(),this.items.forEach((e,t)=>{e.className="game-menu-item",this.selected===t&&e.classList.add("game-menu-item-selected")})}),_defineProperty(this,"changeVolume",e=>{0===e?(SFX_VOLUME=this.ranges[0].value,playChangeVolumeSound(SFX_VOLUME)):1===e&&(MUSIC_VOLUME=this.ranges[1].value,playChangeVolumeSound(MUSIC_VOLUME)),this.sounds.changeSFXVolume(SFX_VOLUME),this.sounds.changeMusicVolume(MUSIC_VOLUME)}),_defineProperty(this,"initializeInputs",()=>{const e=e=>{const t=this.selected-2;"ArrowLeft"===e.code?(this.ranges[t].stepDown(),this.changeVolume(t),this.ranges[t].stepUp()):"ArrowRight"===e.code?(this.ranges[t].stepUp(),this.changeVolume(t),this.ranges[t].stepDown()):"ArrowUp"!==e.code&&"ArrowDown"!==e.code||e.preventDefault()};for(const t of this.ranges)t.addEventListener("keydown",e),t.addEventListener("click",e=>e.preventDefault())}),_defineProperty(this,"unFocusAll",()=>{for(const e of this.ranges)e.blur(),e.disabled=!0}),_defineProperty(this,"listener",e=>{"ArrowDown"===e.code?this.selected=(this.selected+1)%this.items.length:"ArrowUp"===e.code&&(this.selected=(this.selected-1)%this.items.length,this.selected<0&&(this.selected=this.items.length-1))}),this.div=document.querySelector("#game-menu"),this.items=document.querySelectorAll(".game-menu-item"),this.ranges=document.querySelectorAll('.game-menu-item input[type="range"]'),this.selected=0,this.sounds=e,this.initializeInputs()}}class Sound{constructor(e,t){_defineProperty(this,"play",()=>{this.audio.play().then()}),_defineProperty(this,"pause",()=>{this.audio.pause()}),_defineProperty(this,"clear",()=>{this.audio.currentTime=0}),_defineProperty(this,"stop",()=>{this.pause(),this.clear()}),_defineProperty(this,"durationMS",()=>1e3*this.audio.duration),this.audio=document.getElementById(e),this.audio.volume=SFX_VOLUME,t&&(this.audio.volume=MUSIC_VOLUME)}}class GameSounds{constructor(){_defineProperty(this,"stopStageMusic",()=>{this.stage.stop(),this.findExit.stop()}),_defineProperty(this,"changeSFXVolume",e=>{this.pause.audio.volume=e,this.die.audio.volume=e}),_defineProperty(this,"changeMusicVolume",e=>{this.titleScreen.audio.volume=e,this.stageStart.audio.volume=e,this.stage.audio.volume=e,this.lifeLost.audio.volume=e,this.ending.audio.volume=e,this.over.audio.volume=e,this.complete.audio.volume=e,this.findExit.audio.volume=e}),this.titleScreen=new Sound("title-screen-music",!0),this.stageStart=new Sound("stage-start-music",!0),this.stage=new Sound("stage-music",!0),this.lifeLost=new Sound("life-lost-music",!0),this.ending=new Sound("ending-music",!0),this.over=new Sound("over-music",!0),this.complete=new Sound("stage-complete-music",!0),this.findExit=new Sound("find-exit-music",!0),this.pause=new Sound("pause-sound"),this.die=new Sound("die-sound")}}class Screen{constructor(e){_defineProperty(this,"hide",()=>{this.div.style.opacity="0"}),_defineProperty(this,"show",()=>{this.div.style.opacity="1"}),_defineProperty(this,"hideDisplay",()=>{this.div.style.display="none"}),_defineProperty(this,"showDisplay",()=>{this.div.style.display="flex"}),this.div=document.querySelector(`#${e}`),this.hide()}}class GameScreen{constructor(){_defineProperty(this,"showStage",()=>{this.stage.show(),this.info.show()}),_defineProperty(this,"hideStage",()=>{this.stage.hide(),this.info.hide()}),_defineProperty(this,"setGameScore",e=>{this.gameScore.div.querySelector("span").innerText=String(e)}),this.mainMenu=new Screen("main-menu"),this.mainMenu.show(),this.stageStart=new Screen("stage-start"),this.gameOver=new Screen("game-over"),this.gameOver.show(),this.gameOver.hideDisplay(),this.stage=new Screen("board"),this.ending=new Screen("ending"),this.ending.show(),this.ending.hideDisplay(),this.info=new Screen("game-info"),this.incorrectArguments=new Screen("incorrect-arguments"),this.incorrectArguments.show(),this.incorrectArguments.hideDisplay(),this.gameScore=new Screen("game-score")}}class Game{constructor({explosionSize:e=1,bombCount:t=1,liveCount:s=3,stages:i}={}){_defineProperty(this,"checkArguments",(e,t,s,i)=>{if(isNaN(e)||e<1)return`incorrect explosionSize: ${String(e)}`;if(isNaN(t)||t<1)return`incorrect bombCount: ${String(t)}`;if(isNaN(s)||s<1)return`incorrect liveCount: ${String(s)}`;if(!(i instanceof Array))return`incorrect stages: ${String(i)}`;for(let e=0;e<i.length;e++){const t=i[e];if(!(t instanceof Object))return`incorrect stage(${e+1}): ${String(t)}`;const s=t.rows||13,o=t.columns||31,r=t.roundTime||200,n=t.enemies||{},a=t.powerUps||{},h=this.checkStageArguments(s,o,r,n,a,e);if(h)return h}}),_defineProperty(this,"checkStageArguments",(e,t,s,i,o,r)=>{if(isNaN(e)||e<7)return`incorrect stage(${r+1}) rows: ${String(e)}`;if(isNaN(t)||t<7)return`incorrect stage(${r+1}) columns: ${String(t)}`;if(isNaN(s)||s<10)return`incorrect stage(${r+1}) roundTime: ${String(s)}`;if(!(i instanceof Object))return`incorrect stage(${r+1}) enemies: ${String(i)}`;if(i)for(const e of Object.keys(i)){if(!ENEMY_TYPES.includes(e))return`incorrect stage(${r+1}) enemy: ${e}`;if(isNaN(i[e])||i[e]<1)return`incorrect stage(${r+1}) enemy(${e}) count: ${String(i[e])}`}if(void 0!==o&&!(o instanceof Object))return`incorrect stage(${r+1}) powerUps: ${String(o)}`;if(o)for(const e of Object.keys(o)){if(!POWER_UP_TYPES.includes(e))return`incorrect stage(${r+1}) powerUp: ${String(e)}`;if(isNaN(o[e])||o[e]<1)return`incorrect stage(${r+1}) powerUp(${e}) count: ${String(o[e])}`}}),_defineProperty(this,"handleUserInteraction",()=>{const e=()=>{this.sounds=new GameSounds,this.gameMenu=new GameMenu(this.sounds),this.state="pre-main-menu",document.querySelector("#click-me").remove(),document.removeEventListener("click",e)};document.addEventListener("click",e)}),_defineProperty(this,"isBombermanCollidedWithExitDoor",()=>{const{left:e,right:t,top:s,bottom:i}=this.bomberman.getBorders({own:!0,floorValues:!0});return this.stage.isExitDoor(e,s)||this.stage.isExitDoor(e,i)||this.stage.isExitDoor(t,s)||this.stage.isExitDoor(t,i)}),_defineProperty(this,"updateStage",()=>{this.stageNumber++,document.querySelector("#stage-start span").innerText=`${this.stageNumber+1}`}),_defineProperty(this,"cancelPowerUps",()=>{for(const[,e]of this.stage.consumedPowerUps)switch(e.type){case"bombs":this.stage.updateBombCountBy(-1);break;case"flames":this.stage.options.explosionSize--;break;case"speed":this.bomberman.speed-=POWER_UP_SPEED_BOOST;break;case"wall-pass":this.bomberman.wallPass=!1;break;case"detonator":this.bomberman.detonator=!1;break;case"bomb-pass":this.bomberman.bombPass=!1;break;case"flame-pass":this.bomberman.flamePass=!1;break;case"mystery":this.bomberman.invincibleTimer&&this.bomberman.invincibleTimer.clear(),this.bomberman.invincible=!1}this.stage.consumedPowerUps.clear()}),_defineProperty(this,"handleBombermanCollidedWithPowerUp",()=>{const{left:e,right:t,top:s,bottom:i}=this.bomberman.getBorders({own:!0,floorValues:!0});let o;if(this.stage.isPowerUp(e,s)&&!this.stage.isWall(e,s)?o=this.stage.getPowerUp(e,s):this.stage.isPowerUp(e,i)&&!this.stage.isWall(e,i)?o=this.stage.getPowerUp(e,i):this.stage.isPowerUp(t,s)&&!this.stage.isWall(t,s)?o=this.stage.getPowerUp(t,s):this.stage.isPowerUp(t,i)&&!this.stage.isWall(t,i)&&(o=this.stage.getPowerUp(t,i)),o){switch(playPowerUpPickedSound(),o.type){case"bombs":this.stage.updateBombCountBy(1);break;case"flames":this.stage.options.explosionSize++;break;case"speed":this.bomberman.speed+=POWER_UP_SPEED_BOOST;break;case"wall-pass":this.bomberman.wallPass=!0;break;case"detonator":this.bomberman.detonator=!0;break;case"bomb-pass":this.bomberman.bombPass=!0;break;case"flame-pass":this.bomberman.flamePass=!0;break;case"mystery":this.bomberman.invincibleTimer&&this.bomberman.invincibleTimer.clear(),this.bomberman.invincible=!0,this.bomberman.invincibleTimer=new Timer(()=>{this.bomberman.invincible=!1},POWER_UP_INVINCIBLE_TIME)}const e=createId(o.x,o.y);this.stage.consumedPowerUps.set(e,o),this.stage.deletePowerUp(o.x,o.y)}}),_defineProperty(this,"handleBombermanSurroundedWithBombs",(e,t,s,i)=>{this.stage.isBomb(e,s)||this.stage.isBomb(e,i)||this.stage.isBomb(t,s)||this.stage.isBomb(t,i)||(this.bomberman.isSurroundedWithBombs=!1)}),_defineProperty(this,"handleBombermanMove",e=>{const{left:t,right:s,top:i,bottom:o}=this.bomberman.getBorders({own:!1}),r=100*e;this.handleBombermanSurroundedWithBombs(Math.floor(t),Math.floor(s),Math.floor(i),Math.floor(o));let n=!1;const a=this.bomberman.isSurroundedWithBombs,h=this.bomberman.bombPass||a,m=this.bomberman.wallPass;for(let e=this.bomberman.speed;e>0;e-=.25)if(this.keyListener.isPressed("KeyA")&&!this.keyListener.isPressed("KeyD")&&!this.stage.isBlock(t-e*r/TILE_SIZE,i,{bombPass:h,wallPass:m})&&!this.stage.isBlock(t-e*r/TILE_SIZE,o,{bombPass:h,wallPass:m})){this.bomberman.moveLeft(e*r),n=!0;break}for(let e=this.bomberman.speed;e>0;e-=.25)if(this.keyListener.isPressed("KeyD")&&!this.keyListener.isPressed("KeyA")&&!this.stage.isBlock(s+e*r/TILE_SIZE,i,{bombPass:h,wallPass:m})&&!this.stage.isBlock(s+e*r/TILE_SIZE,o,{bombPass:h,wallPass:m})){this.bomberman.moveRight(e*r),n=!0;break}for(let e=this.bomberman.speed;e>0;e-=.25)if(this.keyListener.isPressed("KeyW")&&!this.keyListener.isPressed("KeyS")&&!this.stage.isBlock(t,i-e*r/TILE_SIZE,{bombPass:h,wallPass:m})&&!this.stage.isBlock(s,i-e*r/TILE_SIZE,{bombPass:h,wallPass:m})){this.bomberman.moveUp(e*r),n=!0;break}for(let e=this.bomberman.speed;e>0;e-=.25)if(this.keyListener.isPressed("KeyS")&&!this.keyListener.isPressed("KeyW")&&!this.stage.isBlock(t,o+e*r/TILE_SIZE,{bombPass:h,wallPass:m})&&!this.stage.isBlock(s,o+e*r/TILE_SIZE,{bombPass:h,wallPass:m})){this.bomberman.moveDown(e*r),n=!0;break}n||(this.bomberman.img.className=`bomberman-look-${this.bomberman.direction}`)}),_defineProperty(this,"updateEnemies",e=>{for(const[t]of this.stage.enemies)this.updateEnemy(t,e)}),_defineProperty(this,"updateEnemy",(e,t)=>{this.isEnemyExploded(e)||this.moveEnemyRandomly(e,t)}),_defineProperty(this,"updateInstantBombs",()=>{for(const e of this.stage.bombs.keys()){const t=this.stage.bombs.get(e);t.instant&&(t.instant=!1,t.timer.clear(),t.timer=new Timer(()=>{t.createExplosions(),this.stage.deleteBomb(t.x,t.y)},CHAIN_EXPLOSION_TIME),playExplosionSound())}}),_defineProperty(this,"drawEnemies",()=>{for(const[,e]of this.stage.enemies)e.draw()}),_defineProperty(this,"draw",()=>{this.bomberman.draw(),this.bomberman.liveCountDiv.querySelector("span").innerText=`${this.bomberman.liveCount}`,this.drawEnemies(),this.stage.options.draw()}),_defineProperty(this,"initialize",()=>{this.screen.mainMenu.hideDisplay(),this.stage.initialize(),this.bomberman.initialize(),this.addEventListeners()}),_defineProperty(this,"addEventListeners",()=>{document.addEventListener("keyup",e=>{if("Escape"===e.code)"stage"===this.state?this.state="pre-pause":"pause"===this.state&&(this.state="pre-pre-resume");else if("KeyE"===e.code&&this.bomberman.detonator&&this.stage.bombs.size>0){const e=this.stage.bombs.values().next().value;this.stage.deleteBomb(e.x,e.y),e.createExplosions()}})}),_defineProperty(this,"pauseBomberman",()=>{this.bomberman.timer&&this.bomberman.timer.pause(),this.bomberman.img.className=`bomberman-look-${this.bomberman.direction}`}),_defineProperty(this,"resumeBomberman",()=>{this.bomberman.timer&&this.bomberman.timer.resume()}),_defineProperty(this,"pauseEnemies",()=>{for(const[,e]of this.stage.enemies)e.img.className=`enemy-look-${e.direction}`,e.timer&&e.timer.pause()}),_defineProperty(this,"resumeEnemies",()=>{for(const[,e]of this.stage.enemies)e.timer&&e.timer.resume()}),_defineProperty(this,"pauseBombs",()=>{for(const e of this.stage.bombs.keys()){const t=this.stage.bombs.get(e);t.timer&&t.timer.pause(),t.img.className="bomb-paused"}}),_defineProperty(this,"resumeBombs",()=>{for(const e of this.stage.bombs.keys()){const t=this.stage.bombs.get(e);t.timer&&t.timer.resume(),t.img.className="bomb-exploding"}}),_defineProperty(this,"restart",()=>{this.stage.restart(),this.bomberman.restart()}),_defineProperty(this,"gameMenuListener",e=>{"Enter"===e.code&&(0===this.gameMenu.selected?this.state="pre-pre-resume":1===this.gameMenu.selected?(this.restart(),this.state="pre-pre-resume"):2===this.gameMenu.selected&&location.reload())}),_defineProperty(this,"pause",()=>{this.pauseBomberman(),this.pauseEnemies(),this.pauseBombs(),document.addEventListener("keyup",this.gameMenuListener),this.gameMenu.show()}),_defineProperty(this,"resume",()=>{this.resumeBomberman(),this.resumeEnemies(),this.resumeBombs(),document.removeEventListener("keyup",this.gameMenuListener),this.gameMenu.hide()}),this.screen=new GameScreen;const o=this.checkArguments(e,t,s,i);o?this.error=o:(this.stageNumber=0,this.stages=i,this.stage=new Stage({data:i[this.stageNumber],bombCount:t,explosionSize:e}),this.stage.error?this.error=this.stage.error:(this.bomberman=new Bomberman({board:this.stage.board,liveCount:s}),this.keyListener=new KeyListener,changeTitle("Activate the Game | Bomberman"),this.completed=!1,this.state="click-me",this.handleUserInteraction()))}isBombermanCollidedWithEnemies(){const{left:e,right:t,top:s,bottom:i}=this.bomberman.getBorders({own:!0});for(const[,o]of this.stage.enemies){const{left:r,right:n,top:a,bottom:h}=o.getBorders({own:!0});if(!(s>h||t<r||e>n||i<a))return!0}}isBombermanExploded(){const{left:e,right:t,top:s,bottom:i}=this.bomberman.getBorders({own:!0,floorValues:!0}),o=this.bomberman.flamePass;return this.stage.isExplosion(e,s,{flamePass:o})||this.stage.isExplosion(e,i,{flamePass:o})||this.stage.isExplosion(t,s,{flamePass:o})||this.stage.isExplosion(t,i,{flamePass:o})}handleBombermanDeath(){this.bomberman.die(),this.state="pre-pre-die"}moveEnemyRandomly(e,t){const s=this.stage.enemies.get(e);if(!s.dead){const{left:e,right:i,top:o,bottom:r}=s.getBorders({own:!0}),n=100*t,a=s.wallPass;if("left"===s.direction){let t=!1;for(let i=s.speed;i>0;i-=.25)if(!this.stage.isBlock(e-i*n/TILE_SIZE,o,{wallPass:a,enemy:!0})&&!this.stage.isBlock(e-i*n/TILE_SIZE,r,{wallPass:a,enemy:!0})){s.moveLeft(i*n),t=!0;break}return void(t||(s.direction=getRandomDirection(["right","up","down"])))}if("right"===s.direction){let e=!1;for(let t=s.speed;t>0;t-=.25)if(!this.stage.isBlock(i+t*n/TILE_SIZE,o,{wallPass:a,enemy:!0})&&!this.stage.isBlock(i+t*n/TILE_SIZE,r,{wallPass:a,enemy:!0})){s.moveRight(t*n),e=!0;break}return void(e||(s.direction=getRandomDirection(["left","up","down"])))}if("up"===s.direction){let t=!1;for(let r=s.speed;r>0;r-=.25)if(!this.stage.isBlock(e,o-r*n/TILE_SIZE,{wallPass:a,enemy:!0})&&!this.stage.isBlock(i,o-r*n/TILE_SIZE,{wallPass:a,enemy:!0})){s.moveUp(r*n),t=!0;break}return void(t||(s.direction=getRandomDirection(["left","right","down"])))}if("down"===s.direction){let t=!1;for(let o=s.speed;o>0;o-=.25)if(!this.stage.isBlock(e,r+o*n/TILE_SIZE,{wallPass:a,enemy:!0})&&!this.stage.isBlock(i,r+o*n/TILE_SIZE,{wallPass:a,enemy:!0})){s.moveDown(o*n),t=!0;break}t||(s.direction=getRandomDirection(["left","right","up"]))}}}updateBomberman(e){if(this.bomberman.invincible||!this.isBombermanCollidedWithEnemies())if(this.bomberman.invincible||!this.isBombermanExploded()){if(this.stage.enemies.size<=0&&this.isBombermanCollidedWithExitDoor())return this.updateStage(),void(this.state="pre-pre-stage-completed");this.handleBombermanCollidedWithPowerUp(),this.handleBombermanMove(e)}else this.handleBombermanDeath();else this.handleBombermanDeath()}isEnemyExploded(e){const t=this.stage.enemies.get(e),{left:s,right:i,top:o,bottom:r}=t.getBorders({floorValues:!0});return!!(this.stage.isExplosion(s,o)||this.stage.isExplosion(s,r)||this.stage.isExplosion(i,o)||this.stage.isExplosion(i,r))&&(this.stage.deleteEnemy(t.id),t.die(),this.stage.options.score+=t.xp,this.stage.enemies.size<=0&&(this.state="find-exit"),!0)}updateBombs(){if(this.keyListener.isPressed("Space")&&this.stage.options.bombCount){const e=Math.floor((this.bomberman.left-1+TILE_SIZE/2)/TILE_SIZE+2),t=Math.floor((this.bomberman.top-1+TILE_SIZE/2)/TILE_SIZE+2);if(!this.stage.isBomb(e,t)&&!this.stage.isExitDoor(e,t)&&!this.stage.isWall(e,t)){const s=new Bomb({board:this.stage.board,x:e,y:t,explosionSize:this.stage.options.explosionSize,stage:this.stage});this.bomberman.isSurroundedWithBombs=!0,this.stage.addBomb(s),playBombLeaveSound()}}this.updateInstantBombs()}update(e){this.updateBombs(),this.updateBomberman(e),this.updateEnemies(e),0===this.stage.options.roundTime&&(this.handleBombermanDeath(),this.state="pre-pre-die")}run(){let e=0,t=0;const s=i=>{if(requestAnimationFrame(s),this.error&&(document.querySelector("#incorrect-arguments").textContent=this.error,this.screen.incorrectArguments.showDisplay(),changeTitle("Incorrect arguments | Bomberman"),this.state="INCORRECT-ARGUMENTS"),"pre-main-menu"===this.state)changeTitle("Main Menu | Bomberman"),this.screen.mainMenu.showDisplay(),this.sounds.titleScreen.play(),this.state="main-menu";else if("main-menu"===this.state&&this.keyListener.isPressed("Enter"))this.state="initialize",this.sounds.titleScreen.stop();else if("initialize"===this.state)this.screen.hideStage(),this.initialize(),this.state="pre-stage-start";else if("pre-stage-start"===this.state)changeTitle(`Stage ${this.stageNumber+1} Start | Bomberman`),this.screen.stageStart.show(),this.screen.hideStage(),this.state="stage-start",this.sounds.stageStart.play(),e=i;else if("stage-start"===this.state)i-e>=this.sounds.stageStart.durationMS()&&(this.screen.stageStart.hide(),this.screen.showStage(),this.state="initialize-timer");else if("initialize-timer"===this.state)this.stage.options.initializeTimerChange(),this.state="pre-stage";else if("pre-stage"===this.state)changeTitle(`Stage ${this.stageNumber+1} | Bomberman`),this.screen.showStage(),this.sounds.stage.play(),this.state="stage";else if("stage"===this.state){e=i;const s=(i-t)/1e3;this.update(s),this.draw()}else if("pre-pause"===this.state)changeTitle("Paused | Bomberman"),this.stage.options.interval.clear(),this.sounds.stopStageMusic(),this.sounds.pause.stop(),this.sounds.pause.play(),this.pause(),this.state="pause";else if("pause"===this.state)this.gameMenu.draw();else if("pre-pre-resume"===this.state)e=i,this.sounds.pause.clear(),this.state="pre-resume";else if("pre-resume"===this.state)this.sounds.pause.stop(),this.sounds.pause.play(),this.gameMenu.hide(),this.stage.options.interval.resume(),this.state="resume";else if("resume"===this.state)i-e>=this.sounds.pause.durationMS()/2&&(changeTitle(`Stage ${this.stageNumber+1} | Bomberman`),this.resume(),this.state="pre-stage");else if("over"===this.state)this.sounds.stopStageMusic(),this.sounds.over.play(),this.screen.hideStage(),this.screen.gameOver.showDisplay(),changeTitle("Game Over | Bomberman"),this.state="GAME-OVER";else if("pre-pre-die"===this.state)this.cancelPowerUps(),this.sounds.stopStageMusic(),this.pauseEnemies(),this.sounds.die.play(),this.state="pre-die";else if("pre-die"===this.state)i-e>=this.sounds.die.durationMS()&&(this.sounds.die.stop(),this.sounds.lifeLost.play(),this.stage.options.score=this.stage.options.initialScore,this.state="die");else if("die"===this.state)i-e>=this.sounds.die.durationMS()+this.sounds.lifeLost.durationMS()&&(e=i,this.bomberman.liveCount?(this.state="restart",this.stage.options.resetRoundTime()):this.state="pre-game-score");else if("restart"===this.state)this.restart(),this.state="pre-stage-start";else if("find-exit"===this.state)this.sounds.stage.stop(),this.sounds.findExit.play(),this.state="stage";else if("pre-pre-stage-completed"===this.state)this.pauseBomberman(),this.stage.consumedPowerUps.clear(),this.sounds.stopStageMusic(),this.sounds.complete.play(),this.state="pre-stage-completed",ENEMY_ID=0,e=i;else if("pre-stage-completed"===this.state)i-e>=this.sounds.complete.durationMS()&&(this.screen.hideStage(),changeTitle(`Stage ${this.stageNumber+1} Completed | Bomberman`),this.state="stage-completed");else if("stage-completed"===this.state)if(this.stageNumber<this.stages.length){const e=this.stages[this.stageNumber];this.stage.reinitialize(e),this.bomberman.resetPosition(),this.state="pre-stage-start"}else this.completed=!0,this.state="pre-game-score";else"pre-game-score"===this.state?(changeTitle(`Stage ${this.stageNumber+1} Start | Bomberman`),this.screen.hideStage(),this.screen.setGameScore(this.stage.options.score),this.screen.gameScore.show(),e=i,changeTitle("Final Score | Bomberman"),this.state="game-score"):"game-score"===this.state?i-e>=5e3&&(this.screen.gameScore.hide(),this.completed?this.state="ending":this.state="over"):"ending"===this.state&&(changeTitle("Game End | Bomberman"),this.screen.info.hide(),this.screen.stage.hideDisplay(),this.sounds.ending.play(),this.screen.ending.showDisplay(),this.state="END");t=i};requestAnimationFrame(s)}}const defaultStages={easy:[{rows:15,columns:15,enemies:{balloom:4},powerUps:{bombs:1,flames:1}},{rows:15,columns:15,enemies:{balloom:2,oneal:2},powerUps:{bombs:1,"bomb-pass":1}},{rows:15,columns:15,enemies:{balloom:1,oneal:2,doll:2},powerUps:{"wall-pass":1,speed:1}},{rows:15,columns:15,enemies:{oneal:1,doll:2,minvo:2},powerUps:{"flame-pass":1,detonator:1}},{rows:15,columns:15,enemies:{doll:1,minvo:2,kondoria:2},powerUps:{"bomb-pass":1,mystery:1}}]},game=new Game({stages:[{rows:11,columns:11,enemies:{balloom:1}}]});game.run();